name: IPO Application Scheduler - 5:30 PM

on:
  schedule:
    # Run at 5:30 PM NPT every 24 hours (11:45 UTC)
    - cron: '45 11 * * *'
  workflow_dispatch:
    inputs:
      user_name:
        description: 'User name to apply IPOs for'
        required: true
        default: 'user6'
        type: string

jobs:
  apply-ipos:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: Apply IPOs for user6
      env:
        WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        USER_NAME: ${{ secrets.USER6_NAME }}
      run: |
        python -c "
        import requests
        import os
        import json
        from datetime import datetime
        
        webhook_url = os.getenv('WEBHOOK_URL')
        telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
        telegram_chat_id = os.getenv('TELEGRAM_CHAT_ID')
        user_name = os.getenv('USER_NAME')
        
        if not webhook_url:
            print('‚ùå WEBHOOK_URL not set')
            exit(1)
        
        if not user_name:
            print('‚ùå USER_NAME not set')
            exit(1)
        
        # Get user name from workflow dispatch or use secret
        user_name = '${{ github.event.inputs.user_name }}' if '${{ github.event.inputs.user_name }}' else user_name
        
        print(f'üöÄ Starting IPO application for user: {user_name}')
        print(f'‚è∞ Time: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}')
        
        try:
            # Call the webhook
            response = requests.post(
                f'{webhook_url}/apply',
                json={'user_name': user_name},
                headers={'Content-Type': 'application/json'},
                timeout=300  # 5 minutes timeout
            )
            
            print(f'üì° Response Status: {response.status_code}')
            print(f'üì° Response: {response.text}')
            
            if response.status_code == 200:
                result = response.json()
                print('‚úÖ IPO application completed successfully')
                
                # Send Telegram notification
                if telegram_token and telegram_chat_id:
                    # Use CDSC name from API response if available, otherwise fallback to user_name
                    cdsc_name = result.get('cdsc_name', user_name)
                    notification = f'ü§ñ GitHub Action: IPO Application Complete\n\n'
                    notification += f'üë§ User: {cdsc_name}\n'
                    notification += f'‚è∞ Time: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}\n\n'
                    notification += f'üìä Results:\n'
                    notification += f'‚Ä¢ Successfully Applied: {result.get(\"total_applied\", 0)}\n'
                    notification += f'‚Ä¢ Failed Applications: {result.get(\"total_failed\", 0)}\n'
                    
                    if result.get('applied_issues'):
                        notification += '\n‚úÖ Applied Issues:\n'
                        for issue in result['applied_issues']:
                            notification += f'‚Ä¢ {issue[\"scrip\"]} - {issue[\"company\"]}\n'
                    
                    if result.get('failed_issues'):
                        notification += '\n‚ùå Failed Issues:\n'
                        for issue in result['failed_issues']:
                            notification += f'‚Ä¢ {issue[\"scrip\"]} - {issue[\"company\"]} ({issue[\"reason\"]})\n'
                    
                    telegram_response = requests.post(
                        f'https://api.telegram.org/bot{telegram_token}/sendMessage',
                        json={
                            'chat_id': telegram_chat_id,
                            'text': notification,
                            'parse_mode': 'HTML'
                        }
                    )
                    
                    if telegram_response.status_code == 200:
                        print('‚úÖ Telegram notification sent')
                    else:
                        print(f'‚ùå Failed to send Telegram notification: {telegram_response.status_code}')
                else:
                    print('‚ö†Ô∏è Telegram credentials not configured')
                    
            else:
                print(f'‚ùå IPO application failed with status: {response.status_code}')
                error_msg = f'‚ùå GitHub Action: IPO Application Failed\n\n'
                error_msg += f'üë§ User: {user_name}\n'
                error_msg += f'‚è∞ Time: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}\n'
                error_msg += f'üì° Status: {response.status_code}\n'
                error_msg += f'üìÑ Response: {response.text}'
                
                if telegram_token and telegram_chat_id:
                    requests.post(
                        f'https://api.telegram.org/bot{telegram_token}/sendMessage',
                        json={
                            'chat_id': telegram_chat_id,
                            'text': error_msg,
                            'parse_mode': 'HTML'
                        }
                    )
                
        except Exception as e:
            print(f'‚ùå Exception occurred: {str(e)}')
            error_msg = f'‚ùå GitHub Action: Exception Occurred\n\n'
            error_msg += f'üë§ User: {user_name}\n'
            error_msg += f'‚è∞ Time: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}\n'
            error_msg += f'üí• Error: {str(e)}'
            
            if telegram_token and telegram_chat_id:
                requests.post(
                    f'https://api.telegram.org/bot{telegram_token}/sendMessage',
                    json={
                        'chat_id': telegram_chat_id,
                        'text': error_msg,
                        'parse_mode': 'HTML'
                    }
                )
        " 