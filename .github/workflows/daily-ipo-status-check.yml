name: Daily IPO Status Check - 5:00 AM NPT

on:
  schedule:
    # Run at 5:00 AM NPT every day (23:15 UTC previous day)
    - cron: '15 23 * * *'
  workflow_dispatch:
    inputs:
      force_check:
        description: 'Force check even if not scheduled'
        required: false
        default: false
        type: boolean

jobs:
  check-ipo-status:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: Check IPO Status APIs
      id: check-status
      run: |
        python -c "
        import requests
        import json
        import os
        from datetime import datetime
        
        print('üîç Checking IPO, FPO, and Right-Share APIs...')
        print(f'‚è∞ Time: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}')
        
        # API endpoints to check
        apis = [
            {'name': 'IPO', 'url': 'https://chukul.com/api/ipo/'},
            {'name': 'FPO', 'url': 'https://chukul.com/api/fpo/'},
            {'name': 'Right-Share', 'url': 'https://chukul.com/api/right-share/'}
        ]
        
        any_open = False
        results = []
        
        for api in apis:
            try:
                print(f'üì° Checking {api[\"name\"]} API: {api[\"url\"]}')
                
                response = requests.get(
                    api['url'],
                    headers={'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'},
                    timeout=(10, 30)
                )
                
                if response.status_code == 200:
                    data = response.json()
                    print(f'‚úÖ {api[\"name\"]} API response received')
                    
                    # Check if response is an array and has items
                    if isinstance(data, list) and len(data) > 0:
                        # Check each item for 'status' field
                        for item in data:
                            if isinstance(item, dict) and item.get('status') == 'Open':
                                print(f'üéØ Found OPEN status in {api[\"name\"]} API')
                                any_open = True
                                results.append({
                                    'api': api['name'],
                                    'status': 'Open',
                                    'data': item
                                })
                                break
                        else:
                            print(f'‚ÑπÔ∏è No OPEN status found in {api[\"name\"]} API')
                            results.append({
                                'api': api['name'],
                                'status': 'No Open Items',
                                'data': data[:3] if len(data) > 3 else data  # Show first 3 items
                            })
                    else:
                        print(f'‚ö†Ô∏è {api[\"name\"]} API returned empty or invalid data')
                        results.append({
                            'api': api['name'],
                            'status': 'Empty/Invalid Data',
                            'data': data
                        })
                else:
                    print(f'‚ùå {api[\"name\"]} API returned status code: {response.status_code}')
                    results.append({
                        'api': api['name'],
                        'status': f'HTTP {response.status_code}',
                        'data': response.text[:200] if response.text else 'No response text'
                    })
                    
            except requests.exceptions.ConnectionError as e:
                print(f'‚ùå Connection error for {api[\"name\"]} API: {str(e)}')
                results.append({
                    'api': api['name'],
                    'status': 'Connection Error',
                    'data': str(e)
                })
            except requests.exceptions.Timeout as e:
                print(f'‚ùå Timeout error for {api[\"name\"]} API: {str(e)}')
                results.append({
                    'api': api['name'],
                    'status': 'Timeout Error',
                    'data': str(e)
                })
            except Exception as e:
                print(f'‚ùå Unexpected error for {api[\"name\"]} API: {str(e)}')
                results.append({
                    'api': api['name'],
                    'status': 'Error',
                    'data': str(e)
                })
        
        # Set the environment variable
        apply_for_today = 'true' if any_open else 'false'
        
        print(f'\\nüìä Summary:')
        print(f'‚Ä¢ Any Open Status: {any_open}')
        print(f'‚Ä¢ Apply for Today: {apply_for_today}')
        
        print(f'\\nüìã Detailed Results:')
        for result in results:
            print(f'‚Ä¢ {result[\"api\"]}: {result[\"status\"]}')
        
        # Set output variables for GitHub Actions
        print(f'\\n::set-output name=apply_for_today::{apply_for_today}')
        print(f'::set-output name=any_open::{str(any_open).lower()}')
        
        # Save results to a file to avoid JSON escaping issues
        with open('results.json', 'w') as f:
            json.dump(results, f)
        
        # Exit with success
        exit(0)
        "
    
    - name: Read Results File
      id: read-results
      run: |
        if [ -f results.json ]; then
          RESULTS=$(cat results.json)
          echo "::set-output name=results::$RESULTS"
        else
          echo "::set-output name=results::[]"
        fi
    
    - name: Set Environment Variable
      run: |
        echo "APPLY_FOR_TODAY=${{ steps.check-status.outputs.apply_for_today }}" >> $GITHUB_ENV
        echo "ANY_OPEN=${{ steps.check-status.outputs.any_open }}" >> $GITHUB_ENV
    
    - name: Display Results
      run: |
        echo "üéØ Final Results:"
        echo "‚Ä¢ Apply for Today: ${{ env.APPLY_FOR_TODAY }}"
        echo "‚Ä¢ Any Open Status: ${{ env.ANY_OPEN }}"
        echo "‚Ä¢ Detailed Results: ${{ steps.check-status.outputs.results }}"
        
        if [ "${{ env.APPLY_FOR_TODAY }}" = "true" ]; then
          echo "‚úÖ Setting apply_for_today to true - IPOs/FPOs/Right-Shares are available!"
        else
          echo "‚ÑπÔ∏è Setting apply_for_today to false - No open IPOs/FPOs/Right-Shares found"
        fi
    
    - name: Send Telegram Notification
      if: always()
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        python -c "
        import requests
        import os
        import json
        from datetime import datetime
        
        telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
        telegram_chat_id = os.getenv('TELEGRAM_CHAT_ID')
        apply_for_today = '${{ env.APPLY_FOR_TODAY }}'
        any_open = '${{ env.ANY_OPEN }}'
        results = '${{ steps.read-results.outputs.results }}'
        
        if not telegram_token or not telegram_chat_id:
            print('‚ùå Telegram credentials not set')
            exit(0)
        
        try:
            # Parse results
            results_data = json.loads(results) if results else []
            
            # Create message
            message = f'üìä Daily IPO Status Check - {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}\\n\\n'
            
            if apply_for_today == 'true':
                message += '‚úÖ Apply for Today: TRUE\\n'
                message += 'üéØ Open IPOs/FPOs/Right-Shares found!\\n\\n'
            else:
                message += '‚ÑπÔ∏è Apply for Today: FALSE\\n'
                message += 'üìã No open IPOs/FPOs/Right-Shares found\\n\\n'
            
            message += 'üìã API Status:\\n'
            for result in results_data:
                status_emoji = '‚úÖ' if 'Open' in result['status'] else '‚ùå'
                message += f'{status_emoji} {result[\"api\"]}: {result[\"status\"]}\\n'
            
            # Send to Telegram
            url = f'https://api.telegram.org/bot{telegram_token}/sendMessage'
            payload = {
                'chat_id': telegram_chat_id,
                'text': message,
                'parse_mode': 'Markdown'
            }
            
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                print('‚úÖ Telegram notification sent successfully')
            else:
                print(f'‚ùå Failed to send Telegram notification: {response.status_code}')
                
        except Exception as e:
            print(f'‚ùå Error sending Telegram notification: {str(e)}')
        " 